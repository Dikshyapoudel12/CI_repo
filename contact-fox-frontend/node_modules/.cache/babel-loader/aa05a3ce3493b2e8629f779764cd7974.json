{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR, CLEAR_CONTACTS } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact => contact._id === action.payload._id ? action.payload : contact),\n        loading: false\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n});","map":{"version":3,"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","CLEAR_CONTACTS","state","action","type","contacts","payload","loading","map","contact","_id","filter","filtered","error","current","regex","RegExp","name","match","email"],"sources":["C:/Users/DELL/Desktop/CI repo/contact-fox-frontend/src/context/contact/contactReducer.js"],"sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n  CLEAR_CONTACTS,\n} from \"../types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false,\n      };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact._id === action.payload._id ? action.payload : contact\n        ),\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact._id !== action.payload\n        ),\n        loading: false,\n      };\n    case CLEAR_CONTACTS:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null,\n      };\n    case SET_CURRENT:\n      return {\n        ...state,\n        current: action.payload,\n      };\n    case CLEAR_CURRENT:\n      return {\n        ...state,\n        current: null,\n      };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter((contact) => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        }),\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null,\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,WAAW,EACXC,cAAc,EACdC,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,eAAe,EACfC,YAAY,EACZC,aAAa,EACbC,cAAc,QACT,UAAU;AAEjB,gBAAe,CAACC,KAAK,EAAEC,MAAM,KAAK;EAChC,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKZ,YAAY;MACf,OAAO;QACL,GAAGU,KAAK;QACRG,QAAQ,EAAEF,MAAM,CAACG,OAAO;QACxBC,OAAO,EAAE;MACX,CAAC;IACH,KAAKd,WAAW;MACd,OAAO;QACL,GAAGS,KAAK;QACRG,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACG,QAAQ,CAAC;QAC7CE,OAAO,EAAE;MACX,CAAC;IACH,KAAKV,cAAc;MACjB,OAAO;QACL,GAAGK,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACG,GAAG,CAAEC,OAAO,IACnCA,OAAO,CAACC,GAAG,KAAKP,MAAM,CAACG,OAAO,CAACI,GAAG,GAAGP,MAAM,CAACG,OAAO,GAAGG,OAAO,CAC9D;QACDF,OAAO,EAAE;MACX,CAAC;IACH,KAAKb,cAAc;MACjB,OAAO;QACL,GAAGQ,KAAK;QACRG,QAAQ,EAAEH,KAAK,CAACG,QAAQ,CAACM,MAAM,CAC5BF,OAAO,IAAKA,OAAO,CAACC,GAAG,KAAKP,MAAM,CAACG,OAAO,CAC5C;QACDC,OAAO,EAAE;MACX,CAAC;IACH,KAAKN,cAAc;MACjB,OAAO;QACL,GAAGC,KAAK;QACRG,QAAQ,EAAE,IAAI;QACdO,QAAQ,EAAE,IAAI;QACdC,KAAK,EAAE,IAAI;QACXC,OAAO,EAAE;MACX,CAAC;IACH,KAAKnB,WAAW;MACd,OAAO;QACL,GAAGO,KAAK;QACRY,OAAO,EAAEX,MAAM,CAACG;MAClB,CAAC;IACH,KAAKV,aAAa;MAChB,OAAO;QACL,GAAGM,KAAK;QACRY,OAAO,EAAE;MACX,CAAC;IACH,KAAKhB,eAAe;MAClB,OAAO;QACL,GAAGI,KAAK;QACRU,QAAQ,EAAEV,KAAK,CAACG,QAAQ,CAACM,MAAM,CAAEF,OAAO,IAAK;UAC3C,MAAMM,KAAK,GAAG,IAAIC,MAAM,CAAE,GAAEb,MAAM,CAACG,OAAQ,EAAC,EAAE,IAAI,CAAC;UACnD,OAAOG,OAAO,CAACQ,IAAI,CAACC,KAAK,CAACH,KAAK,CAAC,IAAIN,OAAO,CAACU,KAAK,CAACD,KAAK,CAACH,KAAK,CAAC;QAChE,CAAC;MACH,CAAC;IACH,KAAKhB,YAAY;MACf,OAAO;QACL,GAAGG,KAAK;QACRU,QAAQ,EAAE;MACZ,CAAC;IACH,KAAKZ,aAAa;MAChB,OAAO;QACL,GAAGE,KAAK;QACRW,KAAK,EAAEV,MAAM,CAACG;MAChB,CAAC;IACH;MACE,OAAOJ,KAAK;EAAC;AAEnB,CAAC"},"metadata":{},"sourceType":"module"}